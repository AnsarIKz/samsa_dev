import OpenAI from "openai";

class OpenAIService {
  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || "your_openai_api_key_here",
    });
  }

  async generateBusinessInsights(analyticsData) {
    try {
      const {
        revenue,
        orders,
        inventory,
        expenses,
        profit,
        analytics,
        alerts,
      } = analyticsData;

      const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

**–§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
- –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ‚ÇΩ${revenue?.total?.toLocaleString() || 0}
- –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ‚ÇΩ${expenses?.total?.toLocaleString() || 0}
- –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit?.amount?.toLocaleString() || 0}
- –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${profit?.margin?.toFixed(1) || 0}%

**–ó–ê–ö–ê–ó–´:**
- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders?.total || 0}
- –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${orders?.pending || 0}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${orders?.completed || 0}

**–°–ö–õ–ê–î:**
- –¢–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ: ${inventory?.totalProducts || 0}
- –ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${inventory?.lowStock || 0} —Ç–æ–≤–∞—Ä–æ–≤
- –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞: ‚ÇΩ${inventory?.totalValue?.toLocaleString() || 0}

**–ü–†–û–î–ê–ñ–ò:**
- –¢–æ–ø —Ç–æ–≤–∞—Ä—ã: ${
        analytics?.topProducts
          ?.slice(0, 3)
          .map((p) => `${p.productName} (${p.totalQuantity} —à—Ç)`)
          .join(", ") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
      }
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: ‚ÇΩ${
        analytics?.weeklySales?.[0]?.weeklySales?.toLocaleString() || 0
      }

**–ê–õ–ï–†–¢–´:**
- –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: ${alerts?.lowStock?.length || 0}
- –ö—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (>‚ÇΩ1000): ${alerts?.highExpenses?.length || 0}
- –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å <0.1): ${
        alerts?.lowTurnoverProducts?.length || 0
      }

**–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:**
${
  expenses?.byCategory
    ?.slice(0, 5)
    .map((cat) => `- ${cat.Category}: ‚ÇΩ${cat.total?.toLocaleString()}`)
    .join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
}

**–û–ë–û–†–ê–ß–ò–í–ê–ï–ú–û–°–¢–¨ –¢–û–í–ê–†–û–í (—Ç–æ–ø 5):**
${
  analytics?.turnoverAnalysis
    ?.slice(0, 5)
    .map(
      (item) =>
        `- ${item.productName}: ${item.turnoverRatio?.toFixed(2)} (–ø—Ä–æ–¥–∞–Ω–æ: ${
          item.totalSold
        }, –æ—Å—Ç–∞—Ç–æ–∫: ${item.stockQuantity})`
    )
    .join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
}

–î–∞–π –º–Ω–µ:
1. **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´** - —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
2. **–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –†–û–°–¢–ê** - –≥–¥–µ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å
3. **–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–õ–ê–î–û–ú** - —á—Ç–æ –¥–æ–∫—É–ø–∏—Ç—å, —á—Ç–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å
4. **–ö–û–ù–¢–†–û–õ–¨ –†–ê–°–•–û–î–û–í** - –≥–¥–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å
5. **–ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø** - —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.`;

      const completion = await this.client.chat.completions.create({
        model: "gpt-3.5-turbo-1106",
        messages: [
          {
            role: "system",
            content:
              "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —á–µ—Ç–∫–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 1500,
        temperature: 0.7,
      });

      return {
        insights:
          completion.choices[0]?.message?.content ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã",
        tokensUsed: completion.usage?.total_tokens || 0,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("OpenAI Service Error:", error);
      return {
        insights: `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: ${error.message}`,
        error: true,
        timestamp: new Date().toISOString(),
      };
    }
  }

  async generateProductRecommendations(
    topProducts,
    lowStock,
    turnoverAnalysis
  ) {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ –∑–∞–∫—É–ø–∫–∞—Ö:

**–¢–û–ü –ü–†–û–î–ê–í–ê–ï–ú–´–ï –¢–û–í–ê–†–´:**
${
  topProducts
    ?.slice(0, 5)
    .map(
      (p) =>
        `- ${p.productName}: ${
          p.totalQuantity
        } —à—Ç (‚ÇΩ${p.totalSales?.toLocaleString()})`
    )
    .join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
}

**–¢–û–í–ê–†–´ –° –ù–ò–ó–ö–ò–ú –û–°–¢–ê–¢–ö–û–ú:**
${
  lowStock
    ?.slice(0, 5)
    .map(
      (item) =>
        `- ${item.productName}: –æ—Å—Ç–∞—Ç–æ–∫ ${item.stockQuantity}, –Ω—É–∂–Ω–æ ${item.restockThreshold}`
    )
    .join("\n") || "–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"
}

**–ú–ï–î–õ–ï–ù–ù–´–ï –¢–û–í–ê–†–´ (–Ω–∏–∑–∫–∞—è –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å):**
${
  turnoverAnalysis
    ?.filter((item) => item.turnoverRatio < 0.1)
    .slice(0, 5)
    .map(
      (item) =>
        `- ${item.productName}: –æ–±–æ—Ä–æ—Ç ${item.turnoverRatio?.toFixed(
          3
        )}, –æ—Å—Ç–∞—Ç–æ–∫ ${item.stockQuantity}`
    )
    .join("\n") || "–Ω–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
}

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. üõí –ß—Ç–æ —Å—Ä–æ—á–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å
2. ‚ö†Ô∏è –ß—Ç–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å (–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
3. üìà –ù–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å —É–ø–æ—Ä –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö
4. üí° –ò–¥–µ–∏ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`;

      const completion = await this.client.chat.completions.create({
        model: "gpt-3.5-turbo-1106",
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 800,
        temperature: 0.6,
      });

      return {
        recommendations:
          completion.choices[0]?.message?.content ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        tokensUsed: completion.usage?.total_tokens || 0,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("Product Recommendations Error:", error);
      return {
        recommendations: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
        error: true,
        timestamp: new Date().toISOString(),
      };
    }
  }

  async generateExpenseAlert(highExpenses, monthlyExpensesByCategory) {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:

**–ö–†–£–ü–ù–´–ï –†–ê–°–•–û–î–´ (>‚ÇΩ1000):**
${
  highExpenses
    ?.slice(0, 5)
    .map(
      (exp) =>
        `- ${
          exp.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        }: ‚ÇΩ${exp.amount?.toLocaleString()} (${exp.category}, ${exp.date})`
    )
    .join("\n") || "–Ω–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
}

**–†–ê–°–•–û–î–´ –ü–û –ú–ï–°–Ø–¶–ê–ú –ò –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:**
${
  monthlyExpensesByCategory
    ?.slice(0, 10)
    .map(
      (exp) =>
        `- ${exp.month} / ${
          exp.category
        }: ‚ÇΩ${exp.totalExpense?.toLocaleString()}`
    )
    .join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
}

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. üîç –ì–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å
2. ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã
3. üìä –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
4. üí∞ –ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`;

      const completion = await this.client.chat.completions.create({
        model: "gpt-3.5-turbo-1106",
        messages: [
          {
            role: "system",
            content:
              "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–∏–∑–Ω–µ—Å–∞.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 700,
        temperature: 0.5,
      });

      return {
        expenseAlert:
          completion.choices[0]?.message?.content ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã",
        tokensUsed: completion.usage?.total_tokens || 0,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("Expense Alert Error:", error);
      return {
        expenseAlert: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
        error: true,
        timestamp: new Date().toISOString(),
      };
    }
  }
}

export default new OpenAIService();
