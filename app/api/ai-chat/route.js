import { NextResponse } from "next/server";
import DatabaseService from "@/lib/database.js";
import OpenAIService from "@/lib/openai.js";

class ChatService {
  constructor() {
    this.openaiService = OpenAIService;
  }

  async generateChatResponse(userMessage, dashboardData) {
    try {
      const contextPrompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º –±–∏–∑–Ω–µ—Å–∞:

**–§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
- –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ‚ÇΩ${dashboardData.revenue?.total?.toLocaleString() || 0}
- –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ‚ÇΩ${dashboardData.expenses?.total?.toLocaleString() || 0}
- –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${dashboardData.profit?.amount?.toLocaleString() || 0}
- –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${dashboardData.profit?.margin?.toFixed(1) || 0}%

**–¢–û–í–ê–†–´ –ò –°–ö–õ–ê–î:**
- –¢–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ: ${dashboardData.inventory?.totalProducts || 0}
- –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: ${dashboardData.alerts?.lowStock?.length || 0}
- –¢–æ–ø —Ç–æ–≤–∞—Ä—ã: ${
        dashboardData.analytics?.topProducts
          ?.slice(0, 3)
          .map((p) => `${p.productName} (${p.totalQuantity} —à—Ç)`)
          .join(", ") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
      }

**–ó–ê–ö–ê–ó–´:**
- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${dashboardData.orders?.total || 0}
- –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${dashboardData.orders?.pending || 0}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${dashboardData.orders?.completed || 0}

**–ê–ö–¢–£–ê–õ–¨–ù–´–ï –ê–õ–ï–†–¢–´:**
- –¢–æ–≤–∞—Ä—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ: ${
        dashboardData.alerts?.lowStock
          ?.slice(0, 3)
          .map((item) => `${item.productName} (–æ—Å—Ç–∞—Ç–æ–∫: ${item.stockQuantity})`)
          .join(", ") || "–≤—Å–µ –≤ –Ω–æ—Ä–º–µ"
      }
- –ö—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${
        dashboardData.alerts?.highExpenses?.length || 0
      } —Ç—Ä–∞—Ç —Å–≤—ã—à–µ ‚ÇΩ1000
- –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: ${
        dashboardData.alerts?.lowTurnoverProducts?.length || 0
      } —Å –Ω–∏–∑–∫–æ–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å—é

**–ü–û–°–õ–ï–î–ù–ò–ï –ù–ï–î–ï–õ–¨–ù–´–ï –ü–†–û–î–ê–ñ–ò:** ‚ÇΩ${
        dashboardData.analytics?.weeklySales?.[0]?.weeklySales?.toLocaleString() ||
        0
      }

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å - –æ—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${userMessage}"

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç:`;

      const completion =
        await this.openaiService.client.chat.completions.create({
          model: "gpt-3.5-turbo-1106",
          messages: [
            {
              role: "system",
              content:
                "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–∏–∑–Ω–µ—Å–∞ –ø–æ–Ω–∏–º–∞—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
            },
            {
              role: "user",
              content: contextPrompt,
            },
          ],
          max_tokens: 500,
          temperature: 0.7,
        });

      return {
        response:
          completion.choices[0]?.message?.content ||
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
        tokensUsed: completion.usage?.total_tokens || 0,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("Chat Service Error:", error);

      // Fallback responses when OpenAI is not available
      const fallbackResponses = this.getFallbackResponse(
        userMessage,
        dashboardData
      );

      return {
        response: fallbackResponses,
        error: true,
        fallback: true,
        timestamp: new Date().toISOString(),
      };
    }
  }

  getFallbackResponse(userMessage, dashboardData) {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes("—Ç–æ–≤–∞—Ä") || lowerMessage.includes("–ø—Ä–æ–¥—É–∫—Ç")) {
      const topProduct = dashboardData.analytics?.topProducts?.[0];
      if (topProduct) {
        return `üìä –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä: ${topProduct.productName} (${topProduct.totalQuantity} —à—Ç –ø—Ä–æ–¥–∞–Ω–æ)`;
      }
      return "üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞";
    }

    if (lowerMessage.includes("–ø—Ä–æ–¥–∞–∂") || lowerMessage.includes("–≤—ã—Ä—É—á–∫")) {
      return `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ‚ÇΩ${
        dashboardData.revenue?.total?.toLocaleString() || 0
      }. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: ‚ÇΩ${
        dashboardData.analytics?.weeklySales?.[0]?.weeklySales?.toLocaleString() ||
        0
      }`;
    }

    if (lowerMessage.includes("—Å–∫–ª–∞–¥") || lowerMessage.includes("–æ—Å—Ç–∞—Ç–∫")) {
      const lowStockCount = dashboardData.alerts?.lowStock?.length || 0;
      if (lowStockCount > 0) {
        return `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ${lowStockCount} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!`;
      }
      return "‚úÖ –°–∫–ª–∞–¥ –≤ –ø–æ—Ä—è–¥–∫–µ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç";
    }

    if (lowerMessage.includes("–ø—Ä–∏–±—ã–ª") || lowerMessage.includes("—Ä–∞—Å—Ö–æ–¥")) {
      const profit = dashboardData.profit?.amount || 0;
      const margin = dashboardData.profit?.margin || 0;
      return `üìà –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit.toLocaleString()}, –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${margin.toFixed(
        1
      )}%`;
    }

    if (lowerMessage.includes("–∑–∞–∫–∞–∑")) {
      const total = dashboardData.orders?.total || 0;
      const pending = dashboardData.orders?.pending || 0;
      return `üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${total}, –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${pending}`;
    }

    // Default response
    return `ü§ñ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AI-—á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á. –ü–æ–∫–∞ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    
üí∞ –í—ã—Ä—É—á–∫–∞: ‚ÇΩ${dashboardData.revenue?.total?.toLocaleString() || 0}
üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${dashboardData.inventory?.totalProducts || 0}
üìã –ó–∞–∫–∞–∑–æ–≤: ${dashboardData.orders?.total || 0}
‚ö†Ô∏è –ê–ª–µ—Ä—Ç–æ–≤: ${
      (dashboardData.alerts?.lowStock?.length || 0) +
      (dashboardData.alerts?.highExpenses?.length || 0)
    }`;
  }
}

const chatService = new ChatService();

export async function POST(request) {
  try {
    const { message } = await request.json();

    if (!message || !message.trim()) {
      return NextResponse.json({
        success: false,
        error: "Message is required",
        response: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        fallback: true,
        timestamp: new Date().toISOString(),
      });
    }

    // Get current dashboard data for context
    const dashboardData = await DatabaseService.getDashboardStats();

    // Generate AI response
    const result = await chatService.generateChatResponse(
      message,
      dashboardData
    );

    return NextResponse.json({
      success: true,
      response: result.response,
      tokensUsed: result.tokensUsed || 0,
      fallback: result.fallback || false,
      timestamp: result.timestamp,
    });
  } catch (error) {
    console.error("AI Chat API error:", error);

    // Always return JSON with success: false, never let it fall through to HTML error page
    return NextResponse.json({
      success: false,
      error: "Failed to process chat message",
      response:
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API.",
      fallback: true,
      timestamp: new Date().toISOString(),
    });
  }
}
